install.packages("DT")
knitr::opts_chunk$set(echo = TRUE)
t1 = "-"
t1data = "-"
tab = data.frame(Tema = c(t1),
Data = c(t1data),
Solution = c(t1sol))
t1sol = "-"
tab = data.frame(Tema = c(t1),
Data = c(t1data),
Solution = c(t1sol))
tab
kable(tab,
col.names = c("Tema", "Data de predare", "Solutii"),
align = "ccc")
library(knitr)
kable(tab,
col.names = c("Tema", "Data de predare", "Solutii"),
align = "ccc")
# Statistica
#------------
library(tidyverse)
library(readxl)
mate = read_excel("students/Grupe_anul_III_Matematica_2017-2018.xlsx")
mate = read_excel("students/GRUPE_Matematica_an_III_2017-2018.xlsx")
View(mate)
mate_name = mate[[2]]
grupa_mate = rep(301, length(mate_name))
mate_name = paste(mate[[2:4]], collapse = "")
mate = read_excel("students/GRUPE_Matematica_an_III_2017-2018.xlsx", skip = 1)
mate[[2:4]]
mate[2:4]
mate_name = paste(mate[2:4], collapse = "")
mate_name
mate_name = paste(mate[2:4])
mate_name
mate_name = apply(mate[ , 2:4] , 1 , paste , collapse = "" )
mate_name
mate_name = apply(mate[ , 2:4] , 1 , paste , collapse = " ")
mate_name
grupa_mate = rep(301, length(mate_name))
mate_info = read_excel("students/GRUPE_Matematica-Informatica_an_III_2017-2018.xlsx", skip = 1)
View(mate_info)
mate_info_name = apply(mate_info[ , 2:4] , 1 , paste , collapse = " ")
grupa_mate_info = rep(311, length(mate_info_name))
mate_info_name
mate_aplicata = read_excel("students/GRUPE_Matematici_aplicate_an_III_2017-2018.xlsx", skip = 1)
mate_aplicata_name = apply(mate_aplicata[ , 2:4] , 1 , paste , collapse = " ")
grupa_mate_aplicata = rep(321, length(mate_aplicata_name))
mate_aplicata_name
mate_all_name = c(mate_name, mate_info_name, mate_aplicata_name)
grupa_all = c(grupa_mate, grupa_mate_info, grupa_mate_aplicata)
s = length(mate_all_name)
mate_all_name = enc2utf8(mate_all_name)
statistica = data.frame(Nume = character(s), Grupa = numeric(s), Tema_1 = numeric(s), Tema_2 = numeric(s),
Tema_3 = numeric(s), Tema_4 = numeric(s), Tema_5 = numeric(s), Tema_6 = numeric(s),
Proiect = numeric(s), Examen = numeric(s),
Total = numeric(s))
statistica$Nume = mate_all_name
statistica$Grupa = grupa_all
write.csv(statistica, "students/Tabel_Statistica.csv", row.names = FALSE, fileEncoding = "UTF-8")
statistica$Total = "-"
write.csv(statistica, "students/Tabel_Statistica.csv", row.names = FALSE, fileEncoding = "UTF-8")
stat_tab_R1 = read.csv("results/Tabel_Statistica.csv", stringsAsFactors = FALSE)
View(stat_tab_R1)
mate = read_excel("students/GRUPE_Matematica_an_III_2017-2018.xlsx", skip = 1)
mate_name = apply(mate[ , 2:4] , 1 , paste , collapse = " ")
grupa_mate = rep(301, length(mate_name))
mate_info = read_excel("students/GRUPE_Matematica-Informatica_an_III_2017-2018.xlsx", skip = 1)
mate_info_name = apply(mate_info[ , 2:4] , 1 , paste , collapse = " ")
grupa_mate_info = rep(311, length(mate_info_name))
mate_aplicata = read_excel("students/GRUPE_Matematici_aplicate_an_III_2017-2018.xlsx", skip = 1)
mate_aplicata_name = apply(mate_aplicata[ , 2:4] , 1 , paste , collapse = " ")
grupa_mate_aplicata = rep(321, length(mate_aplicata_name))
mate_all_name = c(mate_name, mate_info_name, mate_aplicata_name)
grupa_all = c(grupa_mate, grupa_mate_info, grupa_mate_aplicata)
s = length(mate_all_name)
statistica = data.frame(Nume = character(s), Grupa = numeric(s), Tema_1 = numeric(s), Tema_2 = numeric(s),
Tema_3 = numeric(s), Tema_4 = numeric(s), Tema_5 = numeric(s), Tema_6 = numeric(s),
Proiect = numeric(s), Examen = numeric(s),
Total = numeric(s))
statistica$Nume = mate_all_name
statistica$Grupa = grupa_all
statistica$Total = "-"
write.csv(statistica, "students/Tabel_Statistica.csv", row.names = FALSE, fileEncoding = "UTF-8")
mate_all_name
View(mate)
webshot::install_phantomjs()
# cate panouri sa avem
p = 5
# nr de intervale de incredere per panou
n = 20
# talia esantionului
m = 50
# coeficient de incredere
alpha = 0.05
# media si sd populatia normala
mu = 3.5
sd = 1.5
lo3 <- hi3 <- lo2 <- hi2 <- lo <- hi <- vector("list", p)
for(i in 1:p) {
set.seed(100*i)
dat = matrix(rnorm(n*m, mean = mu, sd = sd), ncol = m)
# media si vaianta esantionului
me = apply(dat,1,mean)
se = apply(dat,1,sd)
# calcul intervale de incredere
lo[[i]] = me - qnorm(1-alpha/2)*sd/sqrt(m)
hi[[i]] = me + qnorm(1-alpha/2)*sd/sqrt(m)
lo2[[i]] = me - qnorm(1-alpha/2)*se/sqrt(m)
hi2[[i]] = me + qnorm(1-alpha/2)*se/sqrt(m)
lo3[[i]] = me - qt(1-alpha/2, m-1)*se/sqrt(m)
hi3[[i]] = me + qt(1-alpha/2, m-1)*se/sqrt(m)
}
r = range(unlist(c(lo,hi,lo2,hi2,lo3,hi3)))
par(mfrow=c(1,5), las=1, mar=c(5.1,2.1,6.1,2.1))
for(i in 1:p) {
plot(0, 0, type="n",
ylim = 0.5+c(0,n),
xlim = r,
bty = "n",
ylab = "",
xlab = "",
yaxt = "n")
abline(v = mu, lty=2, col="brown3", lwd=2)
segments(lo[[i]], 1:n,
hi[[i]], 1:n,
lwd=2,
col = "royalblue")
o = (1:n)[lo[[i]] > 3.5 | hi[[i]] < 3.5]
segments(lo[[i]][o], o,
hi[[i]][o], o,
lwd=2,col="orange")
}
par(mfrow=c(1,1))
mtext(expression(paste("100 intervale de încredere pentru ", mu)),
side=3, cex=1.5, xpd=TRUE, line=4)
mtext(expression(paste("(",sigma," cunoscut)")), side=3, cex=1.3,
xpd=TRUE,line=2.7)
# cate panouri sa avem
p = 5
# nr de intervale de incredere per panou
n = 20
# talia esantionului
m = 50
# coeficient de incredere
alpha = 0.05
# media si sd populatia normala
mu = 3.5
sd = 1.5
lo3 <- hi3 <- lo2 <- hi2 <- lo <- hi <- vector("list", p)
for(i in 1:p) {
set.seed(11*i)
dat = matrix(rnorm(n*m, mean = mu, sd = sd), ncol = m)
# media si vaianta esantionului
me = apply(dat,1,mean)
se = apply(dat,1,sd)
# calcul intervale de incredere
lo[[i]] = me - qnorm(1-alpha/2)*sd/sqrt(m)
hi[[i]] = me + qnorm(1-alpha/2)*sd/sqrt(m)
lo2[[i]] = me - qnorm(1-alpha/2)*se/sqrt(m)
hi2[[i]] = me + qnorm(1-alpha/2)*se/sqrt(m)
lo3[[i]] = me - qt(1-alpha/2, m-1)*se/sqrt(m)
hi3[[i]] = me + qt(1-alpha/2, m-1)*se/sqrt(m)
}
r = range(unlist(c(lo,hi,lo2,hi2,lo3,hi3)))
par(mfrow=c(1,5), las=1, mar=c(5.1,2.1,6.1,2.1))
for(i in 1:p) {
plot(0, 0, type="n",
ylim = 0.5+c(0,n),
xlim = r,
bty = "n",
ylab = "",
xlab = "",
yaxt = "n")
abline(v = mu, lty=2, col="brown3", lwd=2)
segments(lo[[i]], 1:n,
hi[[i]], 1:n,
lwd=2,
col = "royalblue")
o = (1:n)[lo[[i]] > 3.5 | hi[[i]] < 3.5]
segments(lo[[i]][o], o,
hi[[i]][o], o,
lwd=2,col="orange")
}
par(mfrow=c(1,1))
mtext(expression(paste("100 intervale de încredere pentru ", mu)),
side=3, cex=1.5, xpd=TRUE, line=4)
mtext(expression(paste("(",sigma," cunoscut)")), side=3, cex=1.3,
xpd=TRUE,line=2.7)
par(mfrow=c(1,5), las=1, mar=c(5.1,2.1,6.1,2.1))
for(i in 1:p) {
plot(0, 0,
type="n",
ylim=0.5+c(0,n),
xlim=r,
bty = "n",
ylab="",
xlab="",
yaxt="n")
abline(v = mu,lty = 2, col="brown3", lwd=2)
segments(lo2[[i]], 1:n,
hi2[[i]], 1:n,
lwd=2,
col = "royalblue")
o = (1:n)[lo2[[i]] > 3.5 | hi2[[i]] < 3.5]
segments(lo2[[i]][o],o,
hi2[[i]][o],o,
lwd=2, col="orange")
}
par(mfrow=c(1,1))
mtext(expression(paste("100 intervale de încredere incorecte pentru ", mu)),
side=3, cex=1.5, xpd=TRUE, line=4)
mtext(expression(paste("(",sigma," necunoscut)")),
side=3,cex=1.3,xpd=TRUE,line=2.7)
par(mfrow=c(1,5), las=1, mar=c(5.1,2.1,6.1,2.1))
for(i in 1:p) {
plot(0,0,
type="n",
ylim=0.5+c(0,n),
xlim=r,
bty = "n",
ylab="",
xlab="",
yaxt="n")
abline(v = mu, lty=2, col="brown3", lwd=2)
segments(lo3[[i]],1:n,
hi3[[i]],1:n,
lwd=2,
col = "royalblue")
o = (1:n)[lo3[[i]] > 3.5 | hi3[[i]] < 3.5]
segments(lo3[[i]][o],o,
hi3[[i]][o],o,
lwd=2, col="orange")
}
par(mfrow=c(1,1))
mtext(expression(paste("100 intervale de încredere pentru ", mu)),
side=3, cex=1.5, xpd=TRUE, line=4)
mtext(expression(paste("(",sigma," necunoscut)")),
side=3, cex=1.3, xpd=TRUE, line=2.7)
