doc_CENG = transformScopus("plante_CENG.csv", "plante_CENG_Out", "CENG")
doc_EART = transformScopus("plante_EART.csv", "plante_EART_Out", "EART")
doc_ENGI = transformScopus("plante_ENGI.csv", "plante_ENGI_Out", "ENGI")
doc_ENVI = transformScopus("plante_ENVI.csv", "plante_ENVI_Out", "ENVI")
doc_IMMU = transformScopus("plante_IMMU.csv", "plante_IMMU_Out", "IMMU")
doc_MATE = transformScopus("plante_MATE.csv", "plante_MATE_Out", "MATE")
doc_MEDI = transformScopus("plante_MEDI.csv", "plante_MEDI_Out", "MEDI")
doc_PHAR = transformScopus("plante_PHAR.csv", "plante_PHAR_Out", "PHAR")
doc_PHYS = transformScopus("plante_PHYS.csv", "plante_PHYS_Out", "PHYS")
dat_Bioeconomie = rbind(doc_AGRI, doc_BIOC, doc_CHEM, doc_CENG, doc_EART, doc_ENVI, doc_ENGI,
doc_IMMU, doc_MATE, doc_MEDI, doc_PHAR, doc_PHYS)
write.csv(dat_Bioeconomie, file = "dataOut/MedicinalPlants.csv", quote = TRUE, row.names = FALSE)
cuvWiki = read.csv("dataIn/Keywords/CuvinteWiki.csv", stringsAsFactors = FALSE)
names(cuvWiki) = c("ID", "Keyword")
# 1 - Europe map
#------------------
source("functions/mapEurope.R")
dat.Europe.Articles = data.frame(Name = Europe$name, NArt = Europe$Articles)
dat.Europe.Articles = dat.Europe.Articles[order(dat.Europe.Articles$NArt, decreasing = TRUE),]
dat.Europe.Articles$ID = 1:length(dat.Europe.Articles$NArt)
dat.Europe.Articles = dat.Europe.Articles[, c(3,1,2)]
# ec = ecdf(dat.Europe.Articles$NArt)
# ec(dat.Europe.Articles$NArt[which(dat.Europe.Articles$Name == "Romania")])
tab.EuropeCountryArticles = dat.Europe.Articles[1:11,]
tab.EuropeCountryArticles[11, ] = dat.Europe.Articles[which(dat.Europe.Articles$Name == "Romania"),]
rownames(tab.EuropeCountryArticles) = NULL
kable(tab.EuropeCountryArticles,
digits = 2,
align = "c",
col.names = c("ID", "Country", "Number of articles"),
caption = tn("Top ten most productive countries in Europe and the rank occupied by Romania"))
# 2 - Return to Romania
#------------------------
source("functions/scriptMap2.R")
# a - Table with H index, G index, number of papers and number of citations per Domain
#......................................................................................
source("functions/comp_hindex.R")
source("functions/deleteNA.R")
domains = read.csv("dataIn/Keywords/domenii.csv", stringsAsFactors = FALSE)
dat.combined = read.csv(paste0("dataIn/Data/plante_", domains$Domeniu[1],".csv"), stringsAsFactors = FALSE)
dat.combined$Domain = domains$Domeniu[1]
hgindex = comp_hgindex(dat.combined)
dat.combined$Hindex = hgindex[1]
dat.combined$Gindex = hgindex[2]
for (i in 2:length(domains$Domeniu)){
print(i)
dat = read.csv(paste0("dataIn/Data/plante_", domains$Domeniu[i],".csv"), stringsAsFactors = FALSE)
dat$Domain = domains$Domeniu[i]
hgindex = comp_hgindex(dat)
dat$Hindex = hgindex[1]
dat$Gindex = hgindex[2]
dat.combined = rbind(dat.combined, dat)
}
# writing the file
write.csv(dat.combined, "dataOut/data_Combined.csv")
dat.tab_wc = dat.combined %>% group_by(Domain, Hindex, Gindex) %>%
summarise(count = n(), cited = sum(as.numeric(Cited.by), na.rm = TRUE))
# b - domain intersections plot
#--------------------------------
source("functions/scriptIntersection.R")
upset(data1_intersection, sets = dat_names, mb.ratio = c(0.6, 0.4), order.by = "freq",
sets.bar.color = "#3498DB",
mainbar.y.label = "Domains Intersection Size",
empty.intersections = "on",
sets.x.label = "Number of Papers per Domain",
color.pal = 2,
point.size = 3,
matrix.color = "#535353",
main.bar.color = "#535353",
att.color = int_color,
shade.color = int_color,
shade.alpha = 0.2,
matrix.dot.alpha = 0.3,
queries = list(list(query = intersects, params = list("AGRI"), color = int_color, active = T),
list(query = intersects, params = list("BIOC"), color = int_color, active = T),
list(query = intersects, params = list("CHEM"), color = int_color, active = T),
list(query = intersects, params = list("ENVI"), color = int_color, active = T),
list(query = intersects, params = list("MATE"), color = int_color, active = T),
list(query = intersects, params = list("MEDI"), color = int_color, active = T),
# # list(query = intersects, params = list("IMMU"), color = "orange", active = T),
list(query = intersects, params = list("ENGI"), color = int_color, active = T),
list(query = intersects, params = list("PHAR"), color = int_color, active = T),
list(query = intersects, params = list("EART"), color = int_color, active = T),
# list(query = intersects, params = list("CENG"), color = int_color, active = T),
list(query = intersects, params = list("PHYS"), color = int_color, active = T)))
# Plot: Number of publications by Year
#---------------------------------------
dat_Bioeconomie1 = dat_Bioeconomie[which(dat_Bioeconomie$County != ""), ]
df_BioDY = dat_Bioeconomie1 %>% group_by(Domain, Year) %>% summarise(count = n())
df_BioDY2 = data.frame(Year = rep("", length(unique(df_BioDY$Domain))),
count = rep("", length(unique(df_BioDY$Domain))),
Domain = rep("", length(unique(df_BioDY$Domain))))
df_BioDY2$Year = rep(2015, length(unique(df_BioDY$Domain)))
df_BioDY2$count = df_BioDY$count[which(df_BioDY$Year == 2015)]
df_BioDY2$Domain = df_BioDY$Domain[which(df_BioDY$Year == 2015)]
ggplot(df_BioDY, aes(Year, count)) +
geom_text_repel(aes(x = Year,
y = count,
label = Domain,
colour = Domain),
data = df_BioDY2,
size = 2.75,
# size = 6,
nudge_x = 30,
fontface = 'bold',
box.padding = unit(0.5, 'lines'),
point.padding = unit(1.6, 'lines'),
segment.color = '#D6DBDF',
arrow = arrow(length = unit(0.01, 'npc')))+
geom_line(aes(color = Domain)) +
geom_point(aes(color = Domain)) +
coord_cartesian(xlim = c(min(2000), max(2015) + 1.8)) +
theme_minimal()+
labs(x = "Year", y = "Number of publications", colour = "Domains")
# Plot : - number of citations
#------------------------------
df_BioCiY = dat_Bioeconomie1 %>% group_by(Domain, Year) %>% summarise(count = sum(Cited.by, na.rm = TRUE))
df_BioCiY2 = df_BioCiY %>% group_by(Domain) %>% mutate(CS = cumsum(count))
df_BioCiY3 = data.frame(Year = rep("", length(unique(df_BioCiY2$Domain))),
CS = rep("", length(unique(df_BioCiY2$Domain))),
Domain = rep("", length(unique(df_BioCiY2$Domain))))
df_BioCiY3$Year = rep(2015, length(unique(df_BioCiY2$Domain)))
df_BioCiY3$CS = df_BioCiY2$CS[which(df_BioCiY2$Year == 2015)]
df_BioCiY3$Domain = df_BioCiY2$Domain[which(df_BioCiY2$Year == 2015)]
ggplot(df_BioCiY2, aes(Year, CS)) +
geom_text_repel(aes(x = Year,
y = CS,
label = Domain,
colour = Domain),
data = df_BioCiY3,
size = 2.75,
# size = 6,
nudge_x = 30,
fontface = 'bold',
box.padding = unit(0.5, 'lines'),
point.padding = unit(1.6, 'lines'),
segment.color = '#D6DBDF',
arrow = arrow(length = unit(0.01, 'npc')))+
geom_line(aes(color = Domain)) +
geom_point(aes(color = Domain)) +
coord_cartesian(xlim = c(min(2000), max(2015) + 1.8)) +
theme_minimal()+
labs(x = "Year", y = "Cumulative number of citations", colour = "Domains")
# Plot : - number of citations
#------------------------------
df_BioCiY = dat_Bioeconomie1 %>% group_by(Domain, Year) %>% summarise(count = sum(Cited.by, na.rm = TRUE))
df_BioCiY2 = df_BioCiY %>% group_by(Domain) %>% mutate(CS = cumsum(count))
df_BioCiY3 = data.frame(Year = rep("", length(unique(df_BioCiY2$Domain))),
CS = rep("", length(unique(df_BioCiY2$Domain))),
Domain = rep("", length(unique(df_BioCiY2$Domain))))
df_BioCiY3$Year = rep(2015, length(unique(df_BioCiY2$Domain)))
df_BioCiY3$CS = df_BioCiY2$CS[which(df_BioCiY2$Year == 2015)]
df_BioCiY3$Domain = df_BioCiY2$Domain[which(df_BioCiY2$Year == 2015)]
ggplot(df_BioCiY2, aes(Year, CS)) +
geom_text_repel(aes(x = Year,
y = CS,
label = Domain,
colour = Domain),
data = df_BioCiY3,
size = 2.75,
# size = 6,
nudge_x = 30,
fontface = 'bold',
box.padding = unit(0.5, 'lines'),
point.padding = unit(1.6, 'lines'),
segment.color = '#D6DBDF',
arrow = arrow(length = unit(0.01, 'npc')))+
geom_line(aes(color = Domain)) +
geom_point(aes(color = Domain)) +
coord_cartesian(xlim = c(min(2000), max(2015) + 1.5)) +
theme_minimal()+
labs(x = "Year", y = "Cumulative number of citations", colour = "Domains")
# Plot: Number of publications by Year
#---------------------------------------
dat_Bioeconomie1 = dat_Bioeconomie[which(dat_Bioeconomie$County != ""), ]
df_BioDY = dat_Bioeconomie1 %>% group_by(Domain, Year) %>% summarise(count = n())
df_BioDY2 = data.frame(Year = rep("", length(unique(df_BioDY$Domain))),
count = rep("", length(unique(df_BioDY$Domain))),
Domain = rep("", length(unique(df_BioDY$Domain))))
df_BioDY2$Year = rep(2015, length(unique(df_BioDY$Domain)))
df_BioDY2$count = df_BioDY$count[which(df_BioDY$Year == 2015)]
df_BioDY2$Domain = df_BioDY$Domain[which(df_BioDY$Year == 2015)]
ggplot(df_BioDY, aes(Year, count)) +
geom_text_repel(aes(x = Year,
y = count,
label = Domain,
colour = Domain),
data = df_BioDY2,
size = 2.75,
# size = 6,
nudge_x = 30,
fontface = 'bold',
box.padding = unit(0.5, 'lines'),
point.padding = unit(1.6, 'lines'),
segment.color = '#D6DBDF',
arrow = arrow(length = unit(0.01, 'npc')))+
geom_line(aes(color = Domain)) +
geom_point(aes(color = Domain)) +
coord_cartesian(xlim = c(min(2000), max(2015) + 1)) +
theme_minimal()+
labs(x = "Year", y = "Number of publications", colour = "Domains")
# Plot : - number of citations
#------------------------------
df_BioCiY = dat_Bioeconomie1 %>% group_by(Domain, Year) %>% summarise(count = sum(Cited.by, na.rm = TRUE))
df_BioCiY2 = df_BioCiY %>% group_by(Domain) %>% mutate(CS = cumsum(count))
df_BioCiY3 = data.frame(Year = rep("", length(unique(df_BioCiY2$Domain))),
CS = rep("", length(unique(df_BioCiY2$Domain))),
Domain = rep("", length(unique(df_BioCiY2$Domain))))
df_BioCiY3$Year = rep(2015, length(unique(df_BioCiY2$Domain)))
df_BioCiY3$CS = df_BioCiY2$CS[which(df_BioCiY2$Year == 2015)]
df_BioCiY3$Domain = df_BioCiY2$Domain[which(df_BioCiY2$Year == 2015)]
ggplot(df_BioCiY2, aes(Year, CS)) +
geom_text_repel(aes(x = Year,
y = CS,
label = Domain,
colour = Domain),
data = df_BioCiY3,
size = 2.75,
# size = 6,
nudge_x = 30,
fontface = 'bold',
box.padding = unit(0.5, 'lines'),
point.padding = unit(1.6, 'lines'),
segment.color = '#D6DBDF',
arrow = arrow(length = unit(0.01, 'npc')))+
geom_line(aes(color = Domain)) +
geom_point(aes(color = Domain)) +
coord_cartesian(xlim = c(min(2000), max(2015) + 1)) +
theme_minimal()+
labs(x = "Year", y = "Cumulative number of citations", colour = "Domains")
# Plot : - citations versus papers
#-----------------------------------
dat_Bioeconomie2 = dat_Bioeconomie[-which(is.na(dat_Bioeconomie$Cited.by)),]
# all
ggplot(dat_Bioeconomie2[which(dat_Bioeconomie2$Year > 1999),], aes(x=Cited.by))  +
geom_histogram(aes(y = ..density..), colour="#535353", fill="#535353", binwidth=1.5, alpha = 0.4) +
geom_density(alpha=.2, fill="#84D5F0", lwd = 1.3, lty = "dashed", colour = "#3498DB")+
xlab("Number of citations") + ylab("Number of publications")  +
theme_minimal()+
coord_cartesian(xlim = c(1, 50))
# Number of publications per institution
#---------------------------------------
df_BioUniv = dat_Bioeconomie1 %>% group_by(Year, InstitutionType) %>% summarise(count = n())
df_BioUniv2 = df_BioUniv[which(df_BioUniv$Year>2011),]
df_UnivRI = df_BioUniv2[which(df_BioUniv2$InstitutionType %in% c("Universities", "Research Institutes")), ]
plot_pub_univ_year = ggplot(df_BioUniv, aes(x = Year, y = count, fill = InstitutionType))+
geom_bar(stat = "identity", position = "dodge", colour = "#535353")+
geom_text(aes(label = count), vjust = -.5, position = position_dodge(width=0.9), size = 2)+
scale_fill_brewer(palette = "Set2")+
theme_minimal()+
labs(x = "", y = "Number of publications", fill = "Institutions")+
scale_x_continuous(breaks = c(2000:2015),
labels = c("2000", "2001", "2002","2003", "2004", "2005",
"2006","2007", "2008", "2009", "2010", "2011",
"2012", "2013", "2014", "2015"))+
theme(axis.title = element_text(size = 10),
axis.text = element_text(size = 8),
legend.title = element_text(size = 10),
legend.text = element_text(size = 6),
axis.text.y = element_text(size = 6),
axis.text.x = element_text(angle = 45,vjust = 0.5),
legend.key.size = unit(3, "mm"))
plot_pub_univ_year
source("functions/scriptTopUniversities.R")
ggplot(dat_Univ_p, aes(x = count, y = cited))+
geom_point(aes(size = cited+5), color = int_color, alpha = 0.4)+
geom_text_repel(aes(label = Institution),
size = 2.6,
fontface = 'bold',
box.padding = unit(0.5, 'lines'),
point.padding = unit(1.6, 'lines'),
segment.color = '#D6DBDF',
arrow = arrow(length = unit(0.01, 'npc')))+
theme_minimal()+
coord_cartesian(ylim = c(-100, 1270))+
labs(x = "Number of publications", y = "Number of citations")+
guides(size = "none")
ggplot(dat_Univ_p, aes(x = count, y = cited))+
geom_point(aes(size = cited+50), color = int_color, alpha = 0.4)+
geom_text_repel(aes(label = Institution),
size = 2.6,
fontface = 'bold',
box.padding = unit(0.5, 'lines'),
point.padding = unit(1.6, 'lines'),
segment.color = '#D6DBDF',
arrow = arrow(length = unit(0.01, 'npc')))+
theme_minimal()+
coord_cartesian(ylim = c(-100, 1270))+
labs(x = "Number of publications", y = "Number of citations")+
guides(size = "none")
# Collaboration
#=========================
source("functions/chordMedicinalPlants.R")
# Multi authored articles
#........................
ggplot(DDBS.df.AY, aes(colour = MAT))+
geom_point(aes(x = Year, y = NArt, group = 1), data = DDBS.df.AY[which(DDBS.df.AY$MAT == "T"),]) +
geom_line(aes(x = Year, y = NArt, group = 1), data = DDBS.df.AY[which(DDBS.df.AY$MAT == "T"),], linetype = 2) +
geom_point(aes(x = Year, y = NArt, group = 1), data = DDBS.df.AY[which(DDBS.df.AY$MAT == "M"),]) +
geom_line(aes(x = Year, y = NArt, group = 1), data = DDBS.df.AY[which(DDBS.df.AY$MAT == "M"),], linetype = 2) +
scale_color_discrete(breaks = c("T", "M"), labels = c("Total Articles", "Multi-Authored Articles"))+
theme_minimal()+
labs(x = "", y = "Number of articles", colour = "")+
theme(legend.title = element_text(size = 10),
axis.title.y = element_text(size = 10),
legend.text = element_text(size = 8),
axis.text = element_text(size = 8),
axis.text.y = element_text(size = 6),
axis.text.x = element_text(angle = 45,vjust = 0.5),
legend.key.size = unit(4, "mm"))
# Top ten authors
#.................
tb_authors = DDBS.S$MostProdAuthors
authors = gsub(","," ",names(DDBS.results$Authors)[1:10])
# tb_authors[1] =  sapply(tb_authors[1], CapitalizeWord)
indices <- Hindex(DDBS.df, authors, sep = ";")
# indices$H
tb_authors1 = cbind(tb_authors[,c(1,2)], indices$H[, c(2,3)])
kable(tb_authors1,
digits = 2,
align = "c",
col.names = c("Authors", "Number of articles", "H-index", "G-index"),
caption = tn(paste0("Top 10 authors")))
# Top ten journals
#..................
tb_journals = as.data.frame(DDBS.results$Sources[c(1:9,11)])
tb_journals$SO = tolower(tb_journals$SO)
tb_journals$SO =  sapply(tb_journals$SO, CapitalizeWord)
kable(tb_journals,
digits = 2,
align = "c",
col.names = c("Journal", "Number of articles"),
caption = tn(paste0("Top 10 journals")))
# Collaboration chord graph
#...........................
circos.clear()
par(mar = rep(0, 4), cex=0.9)
circos.par(start.degree = 90, gap.degree = 4)
chordDiagram(x = m, directional = 1, order = NET1_df$Country,
grid.col = NET4_col,
annotationTrack = "grid",
transparency = 0.6,
annotationTrackHeight = c(0.1, 0.1),
preAllocateTracks = list(track.height = 0.1),
diffHeight  = -0.04,
link.border = "#535353",
link.lwd = 0.05,
link.lty = 3,
grid.border = "#535353",
link.sort = TRUE)
#add in labels and axis
circos.trackPlotRegion(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
sector.index = get.cell.meta.data("sector.index")
#text direction (dd) and adjusmtents (aa)
theta = circlize(mean(xlim), 1.3)[1, 1] %% 360
dd <- ifelse(theta < 90 || theta > 270, "clockwise", "reverse.clockwise")
aa = c(1, 0.5)
if(theta < 90 || theta > 270)  aa =c(0, 0.5)
circos.text(x = mean(xlim), y = 0.1, labels = sector.index, facing = dd, adj = aa)
}, bg.border = NA)
circos.clear()
tb_journals
tb_journals = as.data.frame(DDBS.results$Sources[c(1:9,11)])
tb_journals$SO = tolower(tb_journals$SO)
tb_journals$SO =  sapply(tb_journals$SO, CapitalizeWord)
tb_journals$Nr = 1:length(tb_journals$SO)
tb_journals
tb_journals = tb_journals[c(3,1,2)]
tb_journals
# Top ten journals
#..................
tb_journals = as.data.frame(DDBS.results$Sources[c(1:9,11)])
tb_journals$SO = tolower(tb_journals$SO)
tb_journals$SO =  sapply(tb_journals$SO, CapitalizeWord)
tb_journals$Nr = 1:length(tb_journals$SO)
tb_journals = tb_journals[c(3,1,2)]
kable(tb_journals,
digits = 2,
align = "c",
col.names = c("Nr.","Journal", "Number of articles"),
caption = tn(paste0("Top 10 journals")))
# b - domain intersections plot
#--------------------------------
source("functions/scriptIntersection.R")
upset(data1_intersection, sets = dat_names, mb.ratio = c(0.6, 0.4), order.by = "freq",
sets.bar.color = "#3498DB",
mainbar.y.label = "Domains Intersection Size",
empty.intersections = "on",
sets.x.label = "Number of Papers per Domain",
color.pal = 2,
point.size = 3,
matrix.color = "#85929E",
main.bar.color = "#85929E",
att.color = int_color,
shade.color = int_color,
shade.alpha = 0.2,
matrix.dot.alpha = 0.3,
queries = list(list(query = intersects, params = list("AGRI"), color = int_color, active = T),
list(query = intersects, params = list("BIOC"), color = int_color, active = T),
list(query = intersects, params = list("CHEM"), color = int_color, active = T),
list(query = intersects, params = list("ENVI"), color = int_color, active = T),
list(query = intersects, params = list("MATE"), color = int_color, active = T),
list(query = intersects, params = list("MEDI"), color = int_color, active = T),
# # list(query = intersects, params = list("IMMU"), color = "orange", active = T),
list(query = intersects, params = list("ENGI"), color = int_color, active = T),
list(query = intersects, params = list("PHAR"), color = int_color, active = T),
list(query = intersects, params = list("EART"), color = int_color, active = T),
# list(query = intersects, params = list("CENG"), color = int_color, active = T),
list(query = intersects, params = list("PHYS"), color = int_color, active = T)))
NET1_df
# a - Table with H index, G index, number of papers and number of citations per Domain
#......................................................................................
tab_inst_year = dcast(df_BioUniv[which(df_BioUniv$Year>2009),], InstitutionType~Year) %>%
arrange(desc(InstitutionType))
names(tab_inst_year)[1] = "Institution"
tab_inst_year = tab_inst_year[c(1,3,6,5,7,2,4),]
kable(tab_inst_year,
digits = 2,
align = "c",
caption = tn("The number of publications per institution type and year"))
# collaboration table
#...................
kable(NET1_df,
digits = 2,
align = "c",
caption = tn(paste0("Top ", n," collaborations between contries (including self collaborations)")))
# a - Table with H index, G index, number of papers and number of citations per Domain
#......................................................................................
tab_inst_year = dcast(df_BioUniv[which(df_BioUniv$Year>2004),], InstitutionType~Year) %>%
arrange(desc(InstitutionType))
names(tab_inst_year)[1] = "Institution"
tab_inst_year = tab_inst_year[c(1,3,6,5,7,2,4),]
kable(tab_inst_year,
digits = 2,
align = "c",
caption = tn("The number of publications per institution type and year"))
is.na(tab_inst_year[,2:12])
tab_inst_year[is.na(tab_inst_year[,2:12])]
tab_inst_year[,is.na(tab_inst_year[,2:12])]
t1y = tab_inst_year[, 2:12]
t1y[is.na(tab_inst_year[,2:12])] = 0
t1y
tab_inst_year[,2:12] = t1y
# a - Table with H index, G index, number of papers and number of citations per Domain
#......................................................................................
tab_inst_year = dcast(df_BioUniv[which(df_BioUniv$Year>2004),], InstitutionType~Year) %>%
arrange(desc(InstitutionType))
names(tab_inst_year)[1] = "Institution"
tab_inst_year = tab_inst_year[c(1,3,6,5,7,2,4),]
t1y = tab_inst_year[, 2:12]
t1y[is.na(tab_inst_year[,2:12])] = 0
tab_inst_year[,2:12] = t1y
kable(tab_inst_year,
digits = 2,
align = "c",
caption = tn("The number of publications per institution type and year"))
ncol(tab_inst_year)
# a - Table with H index, G index, number of papers and number of citations per Domain
#......................................................................................
tab_inst_year = dcast(df_BioUniv[which(df_BioUniv$Year>2004),], InstitutionType~Year) %>%
arrange(desc(InstitutionType))
names(tab_inst_year)[1] = "Institution"
tab_inst_year = tab_inst_year[c(1,3,6,5,7,2,4),]
t1y = tab_inst_year[, 2:ncol(tab_inst_year)]
t1y[is.na(tab_inst_year[,2:ncol(tab_inst_year)])] = 0
tab_inst_year[,2:ncol(tab_inst_year)] = t1y
kable(tab_inst_year,
digits = 2,
align = "c",
caption = tn("The number of publications per institution type and year"))
# a - Table with H index, G index, number of papers and number of citations per Domain
#......................................................................................
tab_inst_year = dcast(df_BioUniv[which(df_BioUniv$Year>2005),], InstitutionType~Year) %>%
arrange(desc(InstitutionType))
names(tab_inst_year)[1] = "Institution"
tab_inst_year = tab_inst_year[c(1,3,6,5,7,2,4),]
t1y = tab_inst_year[, 2:ncol(tab_inst_year)]
t1y[is.na(tab_inst_year[,2:ncol(tab_inst_year)])] = 0
tab_inst_year[,2:ncol(tab_inst_year)] = t1y
kable(tab_inst_year,
digits = 2,
align = "c",
caption = tn("The number of publications per institution type and year"))
install.packages(c("git2r", "nycflights13", "rmarkdown", "rsconnect", "sp", "spatstat"))
install.packages(c("ggplot2", "Hmisc", "jsonlite", "openssl", "plotrix"))
wdPS = "C:/Users/amari/OneDrive/GitHub/AlexAmarioarei.github.io/Teaching/ProbabilityStatistics/results"
setwd(wdPS)
data = read.csv("Tabel_Prob_Stat.csv", stringsAsFactors = FALSE)
library(tidyverse)
View(data)
library(reshape2)
data.melt = melt(data, id = c(Grupa, Tema_1, Tema_2, Tema_3, Tema_4))
data.melt = melt(data, id = c("Grupa", "Tema_1", "Tema_2", "Tema_3", "Tema_4"))
View(data.melt)
data.melt = data %>% select("Grupa", "Tema_1", "Tema_2", "Tema_3", "Tema_4") %>% melt(id = c("Grupa"))
View(data.melt)
data2 = data %>% select("Grupa", "Tema_1", "Tema_2", "Tema_3", "Tema_4")
data2 = data %>% select(c("Grupa", "Tema_1", "Tema_2", "Tema_3", "Tema_4"))
data2 = data %>% select(Grupa, Tema_1, Tema_2, Tema_3, Tema_4)
View(data2)
data.melt =  melt(data2, id = c("Grupa"))
View(data.melt)
View(data.melt)
ggplot(data.melt)+
geom_boxplot(aes(value, color = variable))+
facet_wrap("Grupa")
ggplot(data.melt)+
geom_boxplot(aes(y = value, color = variable))+
facet_wrap("Grupa")
str(data.melt)
summary(data.melt$value)
